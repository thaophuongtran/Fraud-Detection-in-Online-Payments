{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Fraud Detection in Online Payments.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Fraud Detection in Online Payments\n",
        "\n",
        "### Thao Tran \n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "In this article, we employ different machine learning models to identify fraud from online transactions data. The data comes from Kaggle, [\"Online Payments Fraud Detection Dataset\"](https://www.kaggle.com/datasets/rupakroy/online-payments-fraud-detection-dataset?resource=download), and has the following columns:\n",
        "\n",
        "* `step`: represents a unit of time where 1 step equals 1 hour\n",
        "* `type`: type of online transaction\n",
        "* `amount`: the amount of the transaction\n",
        "* `nameOrig`: customer starting the transaction\n",
        "* `oldbalanceOrg`: balance before the transaction\n",
        "* `newbalanceOrig`: balance after the transaction\n",
        "* `nameDest`: recipient of the transaction\n",
        "* `oldbalanceDest`: initial balance of recipient before the transaction\n",
        "* `newbalanceDest`: the new balance of recipient after the transaction\n",
        "* `isFraud`: fraud transaction\n",
        "\n",
        "We start by exploring and cleaning the dataset. \n"
      ],
      "metadata": {
        "id": "Y0-AdGl5M_zu"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "l4AaW-G3My-Y"
      },
      "outputs": [],
      "source": [
        "# load library \n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import sklearn\n",
        "import scipy\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "import sklearn.model_selection\n",
        "# ml models\n",
        "from sklearn import svm\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "# performance metrics\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score\n",
        "# ann\n",
        "import keras\n",
        "from keras.models import Sequential\n",
        "from keras.wrappers.scikit_learn import KerasClassifier\n",
        "from keras.layers import Dense\n",
        "# resampling \n",
        "from imblearn.over_sampling import RandomOverSampler\n",
        "from imblearn.under_sampling import RandomUnderSampler"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# load data\n",
        "pms = pd.read_csv(\"PS_20174392719_1491204439457_log.csv\")\n",
        "pms.describe()"
      ],
      "metadata": {
        "id": "j2vA0a5iPUPS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "outputId": "52a4b7d6-3c11-4ec8-ec99-bc509467a60c"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               step        amount  oldbalanceOrg  newbalanceOrig  \\\n",
              "count  6.362620e+06  6.362620e+06   6.362620e+06    6.362620e+06   \n",
              "mean   2.433972e+02  1.798619e+05   8.338831e+05    8.551137e+05   \n",
              "std    1.423320e+02  6.038582e+05   2.888243e+06    2.924049e+06   \n",
              "min    1.000000e+00  0.000000e+00   0.000000e+00    0.000000e+00   \n",
              "25%    1.560000e+02  1.338957e+04   0.000000e+00    0.000000e+00   \n",
              "50%    2.390000e+02  7.487194e+04   1.420800e+04    0.000000e+00   \n",
              "75%    3.350000e+02  2.087215e+05   1.073152e+05    1.442584e+05   \n",
              "max    7.430000e+02  9.244552e+07   5.958504e+07    4.958504e+07   \n",
              "\n",
              "       oldbalanceDest  newbalanceDest       isFraud  isFlaggedFraud  \n",
              "count    6.362620e+06    6.362620e+06  6.362620e+06    6.362620e+06  \n",
              "mean     1.100702e+06    1.224996e+06  1.290820e-03    2.514687e-06  \n",
              "std      3.399180e+06    3.674129e+06  3.590480e-02    1.585775e-03  \n",
              "min      0.000000e+00    0.000000e+00  0.000000e+00    0.000000e+00  \n",
              "25%      0.000000e+00    0.000000e+00  0.000000e+00    0.000000e+00  \n",
              "50%      1.327057e+05    2.146614e+05  0.000000e+00    0.000000e+00  \n",
              "75%      9.430367e+05    1.111909e+06  0.000000e+00    0.000000e+00  \n",
              "max      3.560159e+08    3.561793e+08  1.000000e+00    1.000000e+00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7167ed18-7389-475f-bfdb-3331627d0d7a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>step</th>\n",
              "      <th>amount</th>\n",
              "      <th>oldbalanceOrg</th>\n",
              "      <th>newbalanceOrig</th>\n",
              "      <th>oldbalanceDest</th>\n",
              "      <th>newbalanceDest</th>\n",
              "      <th>isFraud</th>\n",
              "      <th>isFlaggedFraud</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>6.362620e+06</td>\n",
              "      <td>6.362620e+06</td>\n",
              "      <td>6.362620e+06</td>\n",
              "      <td>6.362620e+06</td>\n",
              "      <td>6.362620e+06</td>\n",
              "      <td>6.362620e+06</td>\n",
              "      <td>6.362620e+06</td>\n",
              "      <td>6.362620e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2.433972e+02</td>\n",
              "      <td>1.798619e+05</td>\n",
              "      <td>8.338831e+05</td>\n",
              "      <td>8.551137e+05</td>\n",
              "      <td>1.100702e+06</td>\n",
              "      <td>1.224996e+06</td>\n",
              "      <td>1.290820e-03</td>\n",
              "      <td>2.514687e-06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.423320e+02</td>\n",
              "      <td>6.038582e+05</td>\n",
              "      <td>2.888243e+06</td>\n",
              "      <td>2.924049e+06</td>\n",
              "      <td>3.399180e+06</td>\n",
              "      <td>3.674129e+06</td>\n",
              "      <td>3.590480e-02</td>\n",
              "      <td>1.585775e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.560000e+02</td>\n",
              "      <td>1.338957e+04</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2.390000e+02</td>\n",
              "      <td>7.487194e+04</td>\n",
              "      <td>1.420800e+04</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>1.327057e+05</td>\n",
              "      <td>2.146614e+05</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>3.350000e+02</td>\n",
              "      <td>2.087215e+05</td>\n",
              "      <td>1.073152e+05</td>\n",
              "      <td>1.442584e+05</td>\n",
              "      <td>9.430367e+05</td>\n",
              "      <td>1.111909e+06</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>7.430000e+02</td>\n",
              "      <td>9.244552e+07</td>\n",
              "      <td>5.958504e+07</td>\n",
              "      <td>4.958504e+07</td>\n",
              "      <td>3.560159e+08</td>\n",
              "      <td>3.561793e+08</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7167ed18-7389-475f-bfdb-3331627d0d7a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7167ed18-7389-475f-bfdb-3331627d0d7a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7167ed18-7389-475f-bfdb-3331627d0d7a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# define one hot encoding\n",
        "encoder = OneHotEncoder(sparse=False)\n",
        "# drop name vars\n",
        "pms = pms.drop(['nameOrig','nameDest'],axis=1)\n",
        "# one hot encoding type variable \n",
        "onehot = pd.DataFrame(encoder.fit_transform(pms[['type']]))\n",
        "# rename columns\n",
        "onehot.columns=['Cashin','Cashout','Debit','Payment','Transfer']\n",
        "# join new type variables\n",
        "pms = pms.join(onehot)\n",
        "pms.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "gl3jKab7BveF",
        "outputId": "cb9ebac2-5ae0-4ce8-b40c-9b5df72b73f9"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   step      type    amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n",
              "0     1   PAYMENT   9839.64       170136.0       160296.36             0.0   \n",
              "1     1   PAYMENT   1864.28        21249.0        19384.72             0.0   \n",
              "2     1  TRANSFER    181.00          181.0            0.00             0.0   \n",
              "3     1  CASH_OUT    181.00          181.0            0.00         21182.0   \n",
              "4     1   PAYMENT  11668.14        41554.0        29885.86             0.0   \n",
              "\n",
              "   newbalanceDest  isFraud  isFlaggedFraud  Cashin  Cashout  Debit  Payment  \\\n",
              "0             0.0        0               0     0.0      0.0    0.0      1.0   \n",
              "1             0.0        0               0     0.0      0.0    0.0      1.0   \n",
              "2             0.0        1               0     0.0      0.0    0.0      0.0   \n",
              "3             0.0        1               0     0.0      1.0    0.0      0.0   \n",
              "4             0.0        0               0     0.0      0.0    0.0      1.0   \n",
              "\n",
              "   Transfer  \n",
              "0       0.0  \n",
              "1       0.0  \n",
              "2       1.0  \n",
              "3       0.0  \n",
              "4       0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7ac646d8-763f-4f02-802a-f644a3a6006d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>step</th>\n",
              "      <th>type</th>\n",
              "      <th>amount</th>\n",
              "      <th>oldbalanceOrg</th>\n",
              "      <th>newbalanceOrig</th>\n",
              "      <th>oldbalanceDest</th>\n",
              "      <th>newbalanceDest</th>\n",
              "      <th>isFraud</th>\n",
              "      <th>isFlaggedFraud</th>\n",
              "      <th>Cashin</th>\n",
              "      <th>Cashout</th>\n",
              "      <th>Debit</th>\n",
              "      <th>Payment</th>\n",
              "      <th>Transfer</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>9839.64</td>\n",
              "      <td>170136.0</td>\n",
              "      <td>160296.36</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>1864.28</td>\n",
              "      <td>21249.0</td>\n",
              "      <td>19384.72</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>181.00</td>\n",
              "      <td>181.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>181.00</td>\n",
              "      <td>181.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>21182.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>11668.14</td>\n",
              "      <td>41554.0</td>\n",
              "      <td>29885.86</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ac646d8-763f-4f02-802a-f644a3a6006d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7ac646d8-763f-4f02-802a-f644a3a6006d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7ac646d8-763f-4f02-802a-f644a3a6006d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Undersampling \n",
        "\n",
        "In this classification problem, our target variable is `isFraud`. Unsurprisingly, it is imbalanced where we only have 8,213 cases of fraud out of roughly 6.36 million onservations. "
      ],
      "metadata": {
        "id": "241qVB7LT36D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pms.isFraud.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ks8PT2PpQ43Y",
        "outputId": "bbce4942-a7fa-485f-b9e7-97253e401927"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    6354407\n",
              "1       8213\n",
              "Name: isFraud, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Thus we implement  under sampling method to balance out fraud observations however we retain the skewed distribution by keep the majority class to have five times more observations than the minority class. We then split the data into training set (60 percent) and testing set (40 percent) and standardize the data. "
      ],
      "metadata": {
        "id": "JBhjxz24Kasp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# split data to X and y \n",
        "X = pms.select_dtypes(include=np.number).drop(['isFraud'],axis=1)\n",
        "y = pms.isFraud\n",
        "\n",
        "# instantiating the random undersampler\n",
        "rus = RandomUnderSampler(sampling_strategy=0.2) \n",
        "# resampling X, y\n",
        "X_rus, y_rus = rus.fit_resample(X, y)\n",
        "# check fraud cases count\n",
        "print(y_rus.value_counts())\n",
        "\n",
        "# split data into train and test set \n",
        "X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X_rus, y_rus, test_size = 0.4, random_state = 0)\n",
        "# normalize the data \n",
        "sc = StandardScaler()\n",
        "X_train = sc.fit_transform(X_train)\n",
        "X_test = sc.transform(X_test)"
      ],
      "metadata": {
        "id": "bJGN-oMMT4q_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "53f47698-ef81-42d1-b470-e46c2db34d66"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    41065\n",
            "1     8213\n",
            "Name: isFraud, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Machine Learning Models Comparisons\n",
        "\n",
        "Then we apply different classification models:\n",
        "\n",
        "* Logistics Regression\n",
        "* Support Vector Machine (SVM)\n",
        "* Random Forest\n",
        "* Naive Bayes\n",
        "* Artificial Neural Networks (ANN)\n",
        "\n",
        "We especially have high performance expectations for SVM and ANN as they historically performed well with imbalanced data and skewed distributions. The performance metrics to be compared across models in this analysis includes the confusion matrix, accuracy score, and the ROC curve.   "
      ],
      "metadata": {
        "id": "rgs4Yfv2J4i-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# logistic regression\n",
        "logreg = LogisticRegression()\n",
        "logreg.fit(X_train, y_train)\n",
        "# confusion matrix \n",
        "print(\"Confusion matrix: \\n\",confusion_matrix(y_test, logreg.predict(X_test)))\n",
        "# accuracy score\n",
        "print(\"Accuracy score: \",accuracy_score(y_test, logreg.predict(X_test)))\n",
        "# roc curve\n",
        "metrics.plot_roc_curve(logreg, X_test, y_test) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 427
        },
        "id": "MN7Lg4aYr0Ay",
        "outputId": "3f2a7f8b-c14c-4fd5-b14c-e408e782af18"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion matrix: \n",
            " [[3051  208]\n",
            " [ 264 3048]]\n",
            "Accuracy score:  0.9281692284279409\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7f5d660f2450>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# svm\n",
        "svms = svm.SVC()\n",
        "svms.fit(X_train,y_train)\n",
        "# confusion matrix \n",
        "print(\"Confusion matrix: \\n\",confusion_matrix(y_test, svms.predict(X_test)))\n",
        "# accuracy score\n",
        "print(\"Accuracy score: \",accuracy_score(y_test, svms.predict(X_test)))\n",
        "# roc curve\n",
        "metrics.plot_roc_curve(svms, X_test, y_test) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 427
        },
        "id": "lvk9c8pKr5Gt",
        "outputId": "f2b433c4-093a-449b-dde8-7b81fdc05543"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion matrix: \n",
            " [[3149  110]\n",
            " [ 482 2830]]\n",
            "Accuracy score:  0.9099071678587733\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7f5d660f2c90>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# random forest \n",
        "clf = RandomForestClassifier(max_depth=2, random_state=0)\n",
        "clf.fit(X_train, y_train)\n",
        "# confusion matrix \n",
        "print(\"Confusion matrix: \\n\",confusion_matrix(y_test, clf.predict(X_test)))\n",
        "# accuracy score\n",
        "print(\"Accuracy score: \",accuracy_score(y_test, clf.predict(X_test)))\n",
        "# roc curve\n",
        "metrics.plot_roc_curve(clf, X_test, y_test) \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 427
        },
        "id": "BZnbdy9TwpU5",
        "outputId": "f2972ba8-6d98-46c0-dd80-d80eacfd169a"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion matrix: \n",
            " [[3104  155]\n",
            " [ 155 3157]]\n",
            "Accuracy score:  0.9528230101963171\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7f5d78f34390>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# naive bayes\n",
        "gnb = GaussianNB()\n",
        "gnb.fit(X_train, y_train)\n",
        "# confusion matrix \n",
        "print(\"Confusion matrix: \\n\",confusion_matrix(y_test, gnb.predict(X_test)))\n",
        "# accuracy score\n",
        "print(\"Accuracy score: \",accuracy_score(y_test, gnb.predict(X_test)))\n",
        "# roc curve\n",
        "metrics.plot_roc_curve(gnb, X_test, y_test) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 427
        },
        "id": "57LLKjoPwpRe",
        "outputId": "c87d3960-a3cb-4efd-8729-f7c8d175e1da"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion matrix: \n",
            " [[1875 1384]\n",
            " [  10 3302]]\n",
            "Accuracy score:  0.7878557297215035\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7f5d78794990>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#  artificial neural network\n",
        "classifier = Sequential()\n",
        "classifier.add(Dense(12, activation = 'softmax',input_dim=12))\n",
        "classifier.add(Dense(6, activation = 'relu'))\n",
        "classifier.add(Dense(1, activation = 'sigmoid'))\n",
        "classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n",
        "classifier.fit(X_train, y_train, batch_size = 10, epochs = 100)\n",
        "# confusion matrix \n",
        "print(\"Confusion matrix: \\n\",confusion_matrix(y_test, (classifier.predict(X_test)>0.5)))\n",
        "# accuracy score\n",
        "print(\"Accuracy score: \",accuracy_score(y_test, (classifier.predict(X_test)>0.5)))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hb0dzIPlyQRU",
        "outputId": "06532b38-9789-4513-9b07-03b9f53e676f"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "986/986 [==============================] - 4s 3ms/step - loss: 0.4941 - accuracy: 0.7820\n",
            "Epoch 2/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.3013 - accuracy: 0.8568\n",
            "Epoch 3/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.2570 - accuracy: 0.8819\n",
            "Epoch 4/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.2314 - accuracy: 0.8983\n",
            "Epoch 5/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.2165 - accuracy: 0.9042\n",
            "Epoch 6/100\n",
            "986/986 [==============================] - 4s 4ms/step - loss: 0.2072 - accuracy: 0.9071\n",
            "Epoch 7/100\n",
            "986/986 [==============================] - 3s 3ms/step - loss: 0.2007 - accuracy: 0.9111\n",
            "Epoch 8/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1955 - accuracy: 0.9143\n",
            "Epoch 9/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1914 - accuracy: 0.9148\n",
            "Epoch 10/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1877 - accuracy: 0.9167\n",
            "Epoch 11/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1841 - accuracy: 0.9186\n",
            "Epoch 12/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1806 - accuracy: 0.9199\n",
            "Epoch 13/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1781 - accuracy: 0.9209\n",
            "Epoch 14/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1750 - accuracy: 0.9236\n",
            "Epoch 15/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1729 - accuracy: 0.9243\n",
            "Epoch 16/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1700 - accuracy: 0.9245\n",
            "Epoch 17/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1666 - accuracy: 0.9261\n",
            "Epoch 18/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1652 - accuracy: 0.9261\n",
            "Epoch 19/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1625 - accuracy: 0.9285\n",
            "Epoch 20/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1598 - accuracy: 0.9284\n",
            "Epoch 21/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1570 - accuracy: 0.9306\n",
            "Epoch 22/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1543 - accuracy: 0.9310\n",
            "Epoch 23/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1526 - accuracy: 0.9323\n",
            "Epoch 24/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1493 - accuracy: 0.9330\n",
            "Epoch 25/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1478 - accuracy: 0.9340\n",
            "Epoch 26/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1454 - accuracy: 0.9371\n",
            "Epoch 27/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1420 - accuracy: 0.9360\n",
            "Epoch 28/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1399 - accuracy: 0.9363\n",
            "Epoch 29/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1393 - accuracy: 0.9386\n",
            "Epoch 30/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1357 - accuracy: 0.9396\n",
            "Epoch 31/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1337 - accuracy: 0.9421\n",
            "Epoch 32/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1310 - accuracy: 0.9438\n",
            "Epoch 33/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1291 - accuracy: 0.9442\n",
            "Epoch 34/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1276 - accuracy: 0.9466\n",
            "Epoch 35/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1254 - accuracy: 0.9469\n",
            "Epoch 36/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1234 - accuracy: 0.9492\n",
            "Epoch 37/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1206 - accuracy: 0.9511\n",
            "Epoch 38/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1204 - accuracy: 0.9505\n",
            "Epoch 39/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1181 - accuracy: 0.9511\n",
            "Epoch 40/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1162 - accuracy: 0.9547\n",
            "Epoch 41/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1150 - accuracy: 0.9543\n",
            "Epoch 42/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1145 - accuracy: 0.9557\n",
            "Epoch 43/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1106 - accuracy: 0.9564\n",
            "Epoch 44/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1110 - accuracy: 0.9562\n",
            "Epoch 45/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1090 - accuracy: 0.9571\n",
            "Epoch 46/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1074 - accuracy: 0.9584\n",
            "Epoch 47/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1077 - accuracy: 0.9601\n",
            "Epoch 48/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1051 - accuracy: 0.9591\n",
            "Epoch 49/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1040 - accuracy: 0.9614\n",
            "Epoch 50/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1037 - accuracy: 0.9615\n",
            "Epoch 51/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1005 - accuracy: 0.9619\n",
            "Epoch 52/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1004 - accuracy: 0.9625\n",
            "Epoch 53/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.1008 - accuracy: 0.9629\n",
            "Epoch 54/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0988 - accuracy: 0.9625\n",
            "Epoch 55/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0987 - accuracy: 0.9660\n",
            "Epoch 56/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0976 - accuracy: 0.9641\n",
            "Epoch 57/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0956 - accuracy: 0.9642\n",
            "Epoch 58/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0945 - accuracy: 0.9663\n",
            "Epoch 59/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0941 - accuracy: 0.9664\n",
            "Epoch 60/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0940 - accuracy: 0.9654\n",
            "Epoch 61/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0917 - accuracy: 0.9671\n",
            "Epoch 62/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0915 - accuracy: 0.9674\n",
            "Epoch 63/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0899 - accuracy: 0.9681\n",
            "Epoch 64/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0898 - accuracy: 0.9678\n",
            "Epoch 65/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0889 - accuracy: 0.9691\n",
            "Epoch 66/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0894 - accuracy: 0.9677\n",
            "Epoch 67/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0882 - accuracy: 0.9696\n",
            "Epoch 68/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0865 - accuracy: 0.9715\n",
            "Epoch 69/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0872 - accuracy: 0.9673\n",
            "Epoch 70/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0859 - accuracy: 0.9698\n",
            "Epoch 71/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0837 - accuracy: 0.9711\n",
            "Epoch 72/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0825 - accuracy: 0.9714\n",
            "Epoch 73/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0827 - accuracy: 0.9719\n",
            "Epoch 74/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0821 - accuracy: 0.9719\n",
            "Epoch 75/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0820 - accuracy: 0.9721\n",
            "Epoch 76/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0801 - accuracy: 0.9736\n",
            "Epoch 77/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0810 - accuracy: 0.9708\n",
            "Epoch 78/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0804 - accuracy: 0.9724\n",
            "Epoch 79/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0796 - accuracy: 0.9723\n",
            "Epoch 80/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0781 - accuracy: 0.9724\n",
            "Epoch 81/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0781 - accuracy: 0.9739\n",
            "Epoch 82/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0774 - accuracy: 0.9732\n",
            "Epoch 83/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0781 - accuracy: 0.9728\n",
            "Epoch 84/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0765 - accuracy: 0.9740\n",
            "Epoch 85/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0769 - accuracy: 0.9738\n",
            "Epoch 86/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0757 - accuracy: 0.9733\n",
            "Epoch 87/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0756 - accuracy: 0.9745\n",
            "Epoch 88/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0745 - accuracy: 0.9754\n",
            "Epoch 89/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0745 - accuracy: 0.9742\n",
            "Epoch 90/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0740 - accuracy: 0.9757\n",
            "Epoch 91/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0730 - accuracy: 0.9761\n",
            "Epoch 92/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0740 - accuracy: 0.9753\n",
            "Epoch 93/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0723 - accuracy: 0.9766\n",
            "Epoch 94/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0725 - accuracy: 0.9760\n",
            "Epoch 95/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0719 - accuracy: 0.9776\n",
            "Epoch 96/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0735 - accuracy: 0.9736\n",
            "Epoch 97/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0717 - accuracy: 0.9752\n",
            "Epoch 98/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0721 - accuracy: 0.9751\n",
            "Epoch 99/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0711 - accuracy: 0.9769\n",
            "Epoch 100/100\n",
            "986/986 [==============================] - 2s 2ms/step - loss: 0.0707 - accuracy: 0.9775\n",
            "Confusion matrix: \n",
            " [[3117  142]\n",
            " [  19 3293]]\n",
            "Accuracy score:  0.9754984020697002\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "All models perform well with accuracy over 90 percent and AUC over 93 percent. According to the performance metrics, particularly the accuracy scores, ANN (accuracy = 0.9755) significantly outperforms other models, followed by random forest (accuracy - 0.9528). We thus proceed to train the model on the entire data set to be used for further classification.   "
      ],
      "metadata": {
        "id": "JmF026P8_2O-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#  artificial neural network on the whole data sets\n",
        "classifier = Sequential()\n",
        "classifier.add(Dense(12, activation = 'softmax',input_dim=12))\n",
        "classifier.add(Dense(6, activation = 'relu'))\n",
        "classifier.add(Dense(1, activation = 'sigmoid'))\n",
        "classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n",
        "classifier.fit(X, y, batch_size = 1000, epochs = 10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2ZjBpkNFMtjj",
        "outputId": "a747cbd8-3957-4894-cc3d-bf2f7d0e97d6"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "6363/6363 [==============================] - 25s 4ms/step - loss: 0.0394 - accuracy: 0.9926\n",
            "Epoch 2/10\n",
            "6363/6363 [==============================] - 15s 2ms/step - loss: 0.0096 - accuracy: 0.9987\n",
            "Epoch 3/10\n",
            "6363/6363 [==============================] - 15s 2ms/step - loss: 0.0092 - accuracy: 0.9987\n",
            "Epoch 4/10\n",
            "6363/6363 [==============================] - 15s 2ms/step - loss: 0.0091 - accuracy: 0.9987\n",
            "Epoch 5/10\n",
            "6363/6363 [==============================] - 15s 2ms/step - loss: 0.0096 - accuracy: 0.9987\n",
            "Epoch 6/10\n",
            "6363/6363 [==============================] - 15s 2ms/step - loss: 0.0096 - accuracy: 0.9987\n",
            "Epoch 7/10\n",
            "6363/6363 [==============================] - 15s 2ms/step - loss: 0.0093 - accuracy: 0.9987\n",
            "Epoch 8/10\n",
            "6363/6363 [==============================] - 15s 2ms/step - loss: 0.0097 - accuracy: 0.9987\n",
            "Epoch 9/10\n",
            "6363/6363 [==============================] - 15s 2ms/step - loss: 0.0094 - accuracy: 0.9987\n",
            "Epoch 10/10\n",
            "6363/6363 [==============================] - 15s 2ms/step - loss: 0.0079 - accuracy: 0.9987\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f5d6f083cd0>"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    }
  ]
}
